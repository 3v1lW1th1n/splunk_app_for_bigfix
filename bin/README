#
# This is an example program for creating new scripted inputs.
# All scripted inputs utilize SOAP and the query_runner
# library in order to send queries to bigfix.
#
# Please do not make changes directly within this application
# structure.  Future app updates will quite likely overwrite your
# changes.
#
# The query_runner will pull auth credentials from your
# configuration (as configured through Manager or
# directly through bigfix.conf).  It will also establish
# the SOAP connection, as well as track the time of execution
# in order to perform as much checkpointing as is possible (i.e.
# only fetch results from clients that have reported since the
# last run; only fetch results where last relevant time or other
# time-based value has changed).  A file will be created in
# var/run (e.g. var/run/myquery.py.done) which will contain the
# timestamp.  It's not recommended to modify or remove those files.
#
# There is some string replacement that will take place on
# your relevance query, so the following are expected to exist:
#  {url}      will be filled with the soap url
#  {user}     will be filled with the soap user
#  {filter}   add this to your query in the appropriate location, if desired
#  {prev_run} if a filter is supplied, this is required
#

import os
import sys

# Add the app/lib directory to the library load path
# You should, be creating your personal scripted
# inputs in your own bin directory, by the way
#sys.path.append(os.path.join(os.environ['SPLUNK_HOME'], 'etc', 'apps', 'bigfix', 'lib'))
sys.path.append(os.path.join(sys.path[0], '..', 'lib'))

# import the query runner
from bigfix import query_runner

# instantiate a new QueryRunner object
qr = query_runner.QueryRunner()

# define the time-based filter for checkpoints
# {prev_run} will be filled in with the previous time of execution
qr.filter = 'whose (last report time of it >= {prev_run} as time)'

# define the desired relevance statement; the "bigfix_server"
# isn't strictly required, but is probably good practice in
# the event that you ever have events from clients on another
# server.
#
# {url} and {user} will be filled in with the auth info
# {filter} will be filled in with the filter value you've
# defined above (e.g. qr.filter = 'whose (last report time ...)')
qr.expr = """
  (
   last report time of item 0 of it as string & 
   " client_id=" & id of item 0 of it as string &
   " client_name=" & name of item 0 of it &
   " bigfix_server=" & item 1 of it &
   " soap_url=" & "{url}" &
   " soap_user=" & "{user}"
  )
  of (
   bes computers {filter},
   (database name of it & "," & database id of it as string) of current bes server
  )
"""

# Run the query.  In the event that you've configured
# more than one server in the bigfix.conf, each will
# be run sequentially
results = qr.run()

# Print the results to stdout.  Encoding to utf-8 may
# be necessary (for instance, the (r) Reserved sign which can sometimes
# be found in the inventory & license operating system strings will
# cause a stacktrace unless the string is encoded as utf-8)
for res in results:
  print res.encode('utf-8')

# If you'd like to simply run a query without interpolating
# values and checkpointing, you can simply use qr.query(...)
groups = qr.query("""(name of it, ids of members of it as string) of bes computer groups""")

for group in groups:
  print group
